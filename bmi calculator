import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3
from datetime import datetime
import matplotlib.pyplot as plt

# Database setup
conn = sqlite3.connect("bmi_data.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS bmi_records (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT,
    weight REAL,
    height REAL,
    bmi REAL,
    date TEXT
)
""")
conn.commit()

# BMI category determination
def get_bmi_category(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 25:
        return "Normal weight"
    elif 25 <= bmi < 30:
        return "Overweight"
    else:
        return "Obesity"

# Save BMI record to database
def save_bmi(username, weight, height, bmi):
    date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO bmi_records (username, weight, height, bmi, date) VALUES (?, ?, ?, ?, ?)",
                   (username, weight, height, bmi, date_str))
    conn.commit()

# Calculate BMI and show result
def calculate_bmi():
    username = entry_name.get().strip()
    try:
        weight = float(entry_weight.get())
        height = float(entry_height.get())
    except ValueError:
        messagebox.showerror("Error", "Please enter valid numbers for weight and height.")
        return

    if not username:
        messagebox.showerror("Error", "Please enter a username.")
        return

    if height <= 0 or weight <= 0:
        messagebox.showerror("Error", "Weight and height must be positive values.")
        return

    bmi = round(weight / ((height / 100) ** 2), 2)
    category = get_bmi_category(bmi)
    label_result.config(text=f"BMI: {bmi} ({category})")
    save_bmi(username, weight, height, bmi)
    messagebox.showinfo("BMI Calculated", f"{username}'s BMI: {bmi} ({category})")

# View historical records for a user
def view_history():
    username = entry_name.get().strip()
    if not username:
        messagebox.showerror("Error", "Please enter a username to view history.")
        return

    cursor.execute("SELECT date, weight, height, bmi FROM bmi_records WHERE username = ? ORDER BY date", (username,))
    records = cursor.fetchall()

    if not records:
        messagebox.showinfo("No Data", f"No records found for {username}.")
        return

    history_window = tk.Toplevel(root)
    history_window.title(f"{username}'s BMI History")

    tree = ttk.Treeview(history_window, columns=("Date", "Weight", "Height", "BMI"), show="headings")
    tree.heading("Date", text="Date")
    tree.heading("Weight", text="Weight (kg)")
    tree.heading("Height", text="Height (cm)")
    tree.heading("BMI", text="BMI")
    tree.pack(fill="both", expand=True)

    for record in records:
        tree.insert("", "end", values=record)

# Show BMI trend chart
def show_trend():
    username = entry_name.get().strip()
    if not username:
        messagebox.showerror("Error", "Please enter a username to view trend.")
        return

    cursor.execute("SELECT date, bmi FROM bmi_records WHERE username = ? ORDER BY date", (username,))
    data = cursor.fetchall()

    if not data:
        messagebox.showinfo("No Data", f"No BMI data found for {username}.")
        return

    dates, bmis = zip(*data)
    plt.figure(figsize=(8, 5))
    plt.plot(dates, bmis, marker='o', linestyle='-', linewidth=2)
    plt.title(f"{username}'s BMI Trend")
    plt.xlabel("Date")
    plt.ylabel("BMI")
    plt.xticks(rotation=45, ha="right")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# GUI Setup
root = tk.Tk()
root.title("BMI Calculator with History & Trend Analysis")
root.geometry("400x400")

# UI Elements
tk.Label(root, text="Username:").pack(pady=5)
entry_name = tk.Entry(root)
entry_name.pack(pady=5)

tk.Label(root, text="Weight (kg):").pack(pady=5)
entry_weight = tk.Entry(root)
entry_weight.pack(pady=5)

tk.Label(root, text="Height (cm):").pack(pady=5)
entry_height = tk.Entry(root)
entry_height.pack(pady=5)

tk.Button(root, text="Calculate BMI", command=calculate_bmi, bg="#4CAF50", fg="white").pack(pady=10)
label_result = tk.Label(root, text="", font=("Arial", 12, "bold"))
label_result.pack(pady=10)

tk.Button(root, text="View History", command=view_history, bg="#2196F3", fg="white").pack(pady=5)
tk.Button(root, text="Show BMI Trend", command=show_trend, bg="#FF9800", fg="white").pack(pady=5)

root.mainloop()

# Close database when done
conn.close()
